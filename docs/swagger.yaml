basePath: /
definitions:
  controllers.AdditionalProperties:
    properties:
      address:
        $ref: '#/definitions/controllers.Address'
      date_of_birth:
        type: string
      gender:
        type: string
      last_login:
        type: string
      phone_number:
        type: string
      profile_picture:
        type: string
      role:
        type: string
    type: object
  controllers.Address:
    properties:
      city:
        type: string
      country:
        type: string
      postal_code:
        type: string
      state:
        type: string
      street:
        type: string
    type: object
  controllers.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  controllers.UpdateUserProfileRequest:
    properties:
      additional_properties:
        $ref: '#/definitions/models.AdditionalProperties'
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
    type: object
  controllers.UserLoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  controllers.UserLoginResponse:
    properties:
      login_token:
        type: string
      message:
        type: string
    type: object
  controllers.UserPasswordUpdateRequest:
    properties:
      new_password:
        type: string
      old_password:
        type: string
    required:
    - new_password
    - old_password
    type: object
  controllers.UserPasswordUpdateResponse:
    properties:
      message:
        type: string
    type: object
  controllers.UserProfileResponse:
    properties:
      additional_properties:
        $ref: '#/definitions/controllers.AdditionalProperties'
      email:
        type: string
      first_name:
        type: string
      id:
        type: string
      last_name:
        type: string
    type: object
  controllers.UserSignupRequest:
    properties:
      additional_properties:
        $ref: '#/definitions/controllers.AdditionalProperties'
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      password:
        type: string
    required:
    - email
    - first_name
    - last_name
    - password
    type: object
  controllers.UserSignupResponse:
    properties:
      message:
        type: string
    type: object
  controllers.ValidateUserErrorResponse:
    properties:
      error:
        type: string
    type: object
  controllers.ValidateUserSuccessResponse:
    properties:
      message:
        type: string
    type: object
  models.AdditionalProperties:
    properties:
      address:
        $ref: '#/definitions/models.Address'
      dateOfBirth:
        type: string
      gender:
        type: string
      lastLogin:
        type: string
      phoneNumber:
        type: string
      profilePicture:
        type: string
      role:
        type: string
    type: object
  models.Address:
    properties:
      city:
        type: string
      country:
        type: string
      postalCode:
        type: string
      state:
        type: string
      street:
        type: string
    type: object
externalDocs:
  description: OpenAPI
  url: https://swagger.io/resources/open-api/
host: https://go-auth-v1.onrender.com
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: GateKeeper Pro registers and validates users for your frontend.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Gatekeeper Pro API
  version: "1.0"
paths:
  /user/login:
    post:
      consumes:
      - application/json
      description: Logs in a user and returns a JWT token
      parameters:
      - description: Login details
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controllers.UserLoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.UserLoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      summary: User login
      tags:
      - auth
  /user/profile:
    put:
      consumes:
      - application/json
      description: Updates the user profile. Response includes additional properties
        only if the client has use_additional_properties set to true. The id is not
        required in the request as it is derived from the authenticated user's context.
      parameters:
      - description: Update profile details
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controllers.UpdateUserProfileRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.UserProfileResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      summary: Update user profile
      tags:
      - user profile
  /user/signup:
    post:
      consumes:
      - application/json
      description: Creates a new user account
      parameters:
      - description: Signup details
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controllers.UserSignupRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.UserSignupResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      summary: User signup
      tags:
      - auth
  /user/update-password:
    post:
      consumes:
      - application/json
      description: Updates a user's password
      parameters:
      - description: Password update details
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controllers.UserPasswordUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.UserPasswordUpdateResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      summary: Update user password
      tags:
      - auth
  /user/validate:
    get:
      consumes:
      - application/json
      description: Validates the user and checks if they are authenticated
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.ValidateUserSuccessResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controllers.ValidateUserErrorResponse'
      summary: Validate user
      tags:
      - validate user for protected routes
securityDefinitions:
  BasicAuth:
    type: basic
swagger: "2.0"
